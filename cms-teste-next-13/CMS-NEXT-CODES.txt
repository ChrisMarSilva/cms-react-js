

npm install bcryptjs
npm install --save-dev @types/bcryptjs

import bcrypt from 'bcryptjs'

const salt = bcrypt.genSaltSync(10)
 var hash = bcrypt.hashSync(values.newPassword, 10);
 const hashedPassword = bcrypt.hashSync(password, '$2a$10$CwTycUXWue0Thq9StjUM0u')




        ----------------------------------------------------



const {data} = await axios.post('/user', document.querySelector('#my-form'), {
  headers: {
    'Content-Type': 'application/json'
  }
})


 headers: {
      'Content-Type': 'multipart/form-data'
    }

 headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    }


const instance = axios.create({
  baseURL: 'https://some-domain.com/api/',
  timeout: 1000,
  headers: {'X-Custom-Header': 'foobar'}
});


axios.get('/user/12345')
  .then(function (response) {
    console.log(response.data);
    console.log(response.status);
    console.log(response.statusText);
    console.log(response.headers);
    console.log(response.config);
  });


axios.defaults.baseURL = 'https://api.example.com';
axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;
axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';


axios.get('/user/12345')
  .catch(function (error) {
    if (error.response) {
      // The request was made and the server responded with a status code
      // that falls out of the range of 2xx
      console.log(error.response.data);
      console.log(error.response.status);
      console.log(error.response.headers);
    } else if (error.request) {
      // The request was made but no response was received
      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
      // http.ClientRequest in node.js
      console.log(error.request);
    } else {
      // Something happened in setting up the request that triggered an Error
      console.log('Error', error.message);
    }
    console.log(error.config);
  });


const params = new URLSearchParams();
params.append('param1', 'value1');
params.append('param2', 'value2');
axios.post('/foo', params);


const data = { 'bar': 123 };
const options = {
  method: 'POST',
  headers: { 'content-type': 'application/x-www-form-urlencoded' },
  data: qs.stringify(data),
  url,
};
axios(options);


const url = require('url');
const params = new url.URLSearchParams({ foo: 'bar' });
axios.post('http://something.com/', params.toString());


const form = new FormData();
form.append('my_field', 'my value');
form.append('my_buffer', new Blob([1,2,3]));
form.append('my_file', fileInput.files[0]);

axios.post('https://example.com', form)


const handleChange = (e) => {
    const value = e.target.value;
    setState({
      ...state,
      [e.target.name]: value
    });
  };


 <input
            type="text"
            name="name"
            value={state.name}
            onChange={handleChange}
          />


const handleSubmit = async () => {
    try {
      const response = await axios.post(url, userData);
      console.log(response);
    } catch (error) {
      console.log(error);
    }
  };


        ----------------------------------------------------

const { users, loading } = useSelector((state) => state.app);

useEffect(() => {
  if (id) {
    const singleUser = users.filter((ele) => ele.id === id);
    setUpdateData(singleUser[0]);
  }
}, []);


import mysql from "mysql2/promise";

export async function query({ query, values = [] }) {
  const dbconnection = await mysql.createConnection(
    process.env.MYSQL_DATABASE_URL
  );

  //Digital ocean ubuntu
  // const dbconnection = await mysql.createConnection({
  //   host: process.env.MYSQL_HOST,
  //   database: process.env.MYSQL_DATABASE,
  //   user: process.env.MYSQL_USER,
  //   password: process.env.MYSQL_PASSWORD,
  // });

  try {
    const [results] = await dbconnection.execute(query, values);
    dbconnection.end();
    return results;
  } catch (error) {
    throw Error(error.message);
    return { error };
  }
}



//in a separate node js file you can use this wrapper like this:
// const productName = req.body.product_name;
// const addProducts = await query({
//   query: "INSERT INTO products (product_name) VALUES (?)",
//   values: [productName],
// });


//add object to state
setProducts([
  ...products,
  {
    product_id: newproduct.product_id,
    product_name: newproduct.product_name,
  },
]);


//update object to state
const productsStateAfterUpdate = products.map((product) => {
  if (product.product_id === productIdToUpdate) {
    const productUpdated = {
      ...product,
      product_name: productUpdatedName,
    };
    return productUpdated;
  } else {
    return {
      ...product,
    };
  }
});
setProducts(productsStateAfterUpdate);


//remove object from state
setProducts(products.filter((a) => a.product_id !== idToRemove));



----------------------------------------------------


import { useForm } from 'react-hook-form';

type FormData = {
  email: string,
  password: string,
};

const { register, handleSubmit, formState: { errors } } = useForm < FormData > ();

{ ...register('email', {
  required: 'Este campo es requerido',
  validate: validations.isEmail

})
}

{ ...register('password', {
  required: 'Este campo es requerido',
  minLength: { value: 6, message: 'Mínimo 6 caracteres' }
})
}

const onLoginUser = async ({ email, password }: FormData) => {

  setShowError(false);

  // const isValidLogin = await loginUser( email, password );
  // if ( !isValidLogin ) {
  //     setShowError(true);
  //     setTimeout(() => setShowError(false), 3000);
  //     return;
  // }
  // // Todo: navegar a la pantalla que el usuario estaba
  // const destination = router.query.p?.toString() || '/';
  // router.replace(destination);
  await signIn('credentials', { email, password });

}

----------------------------------------------------


  'use client';
import { useEffect, useState, useRef, useMemo } from 'react';
import styles from './page.module.css';

export default function Home() {
  const [items, setItems] = useState < string[] > ([]);
  const [filter, setFilter] = useState < string > ('');
  const inputProduct = useRef < HTMLInputElement > (null);

  const filteredItems = useMemo(() => items.filter((item) => { return item.toLocaleLowerCase().includes(filter.toLocaleLowerCase()); }), [items, filter]);

  useEffect(() => {
    console.log('re-render');
  });

  const handleAddProduct = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!inputProduct.current) return;

    const value = inputProduct.current.value;
    setItems((prev) => [...prev, value]);
    //setFilteredItems((prev) => [...prev, value]);
    inputProduct.current.value = '';
  };

  const handleFilter = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.currentTarget.value;
    setFilter(value);
    // setFilteredItems(items.filter((item) =>item.toLocaleLowerCase().includes(value.toLocaleLowerCase())));
  };

  return (
    <main className={styles.main}>
      <div>
        <span>Filtro:</span>{' '}
        <input type='text' value={filter} onChange={handleFilter} />
        <button onClick={() => setTemp((prev) => !prev)}>Forçar state</button>
      </div>
      <div>
        <h1>Lista de Produtos:</h1>
        <form onSubmit={handleAddProduct}>
          <span>Produto:</span> <input type='text' ref={inputProduct} />{' '}
          <button>Adicionar Produto</button>
        </form>
        <ul>
          {filteredItems.map((item, index) => (
            <li key={index}>{item}</li>
          ))}
        </ul>
      </div>
    </main>
  );
}


----------------------------------------------------


  AuthContext.tsx

import { createContext } from 'react';
import { IUser } from '../../interfaces';


interface ContextProps {
  isLoggedIn: boolean;
  user?: IUser;

  loginUser: (email: string, password: string) => Promise<boolean>;
  registerUser: (name: string, email: string, password: string) => Promise<{ hasError: boolean; message?: string; }>;
  logout: () => void;
}


export const AuthContext = createContext({} as ContextProps);



AuthProvider.tsx

import { FC, useReducer, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useSession, signOut } from 'next-auth/react';

import Cookies from 'js-cookie';
import axios from 'axios';

import { AuthContext, authReducer } from './';

import { tesloApi } from '../../api';
import { IUser } from '../../interfaces';

export interface AuthState {
  isLoggedIn: boolean;
  user?: IUser;
}


const AUTH_INITIAL_STATE: AuthState = {
  isLoggedIn: false,
  user: undefined,
}


export const AuthProvider: FC = ({ children }) => {

  const [state, dispatch] = useReducer(authReducer, AUTH_INITIAL_STATE);
  const { data, status } = useSession();
  const router = useRouter();

  useEffect(() => {

    if (status === 'authenticated') {
      console.log({ user: data?.user });
      dispatch({ type: '[Auth] - Login', payload: data?.user as IUser })
    }

  }, [status, data])



  // useEffect(() => {
  //     checkToken();
  // }, [])

  const checkToken = async () => {

    if (!Cookies.get('token')) {
      return;
    }

    try {
      const { data } = await tesloApi.get('/user/validate-token');
      const { token, user } = data;
      Cookies.set('token', token);
      dispatch({ type: '[Auth] - Login', payload: user });
    } catch (error) {
      Cookies.remove('token');
    }
  }



  const loginUser = async (email: string, password: string): Promise<boolean> => {

    try {
      const { data } = await tesloApi.post('/user/login', { email, password });
      const { token, user } = data;
      Cookies.set('token', token);
      dispatch({ type: '[Auth] - Login', payload: user });
      return true;
    } catch (error) {
      return false;
    }

  }


  const registerUser = async (name: string, email: string, password: string): Promise<{ hasError: boolean; message?: string }> => {
    try {
      const { data } = await tesloApi.post('/user/register', { name, email, password });
      const { token, user } = data;
      Cookies.set('token', token);
      dispatch({ type: '[Auth] - Login', payload: user });
      return {
        hasError: false
      }

    } catch (error) {
      if (axios.isAxiosError(error)) {
        return {
          hasError: true,
          message: error.response?.data.message
        }
      }

      return {
        hasError: true,
        message: 'No se pudo crear el usuario - intente de nuevo'
      }
    }
  }


  const logout = () => {
    Cookies.remove('cart');
    Cookies.remove('firstName');
    Cookies.remove('lastName');
    Cookies.remove('address');
    Cookies.remove('address2');
    Cookies.remove('zip');
    Cookies.remove('city');
    Cookies.remove('country');
    Cookies.remove('phone');

    signOut();
    // router.reload();
    // Cookies.remove('token');
  }



  return (
    <AuthContext.Provider value={{
      ...state,

      // Methods
      loginUser,
      registerUser,
      logout,
    }}>
      {children}
    </AuthContext.Provider>
  )
};
----------------------------------------------------


  { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'

// services/pokemon.ts
export const pokemonApi = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),
  tagTypes: [],
  endpoints: (builder) => ({
    getPokemonByName: builder.query({
      // name is the actual pokemon name - we used Bulbasaur in the example
      query: (name: string) => `pokemon/${name}`,
    }),
    getPokemonById: builder.query({
      query: (id: number) => `pokemon/${id}`
    }),
    // add more queries in the api
  }),
})

// Export hooks for usage in functional components
export const { useGetPokemonByNameQuery, useGetPokemonByIdQuery } = pokemonApi



import { pokemonApi } from './services/pokemon'

const rootReducer = combineReducers({

})

export const setupStore = (preloadedState?: PreloadedState<RootState>) => {
  return configureStore({
    reducer: rootReducer,
    middleware: (getDefaultMiddleware) =>
      // adding the api middleware enables caching, invalidation, polling and other features of `rtk-query`
      getDefaultMiddleware().concat(pokemonApi.middleware),
    preloadedState,
  })
}




export const api = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: '/' }),
  tagTypes: ['Posts'],
  endpoints: (build) => ({
    getPosts: build.query < Post[], void> ({
      query: () => 'posts',
      providesTags: ['Posts'],
    }),
    addPost: build.mutation < Post, Partial<Post>> ({
      query: (body) => ({
        url: `post`,
        method: 'POST',
        body,
      }),
      invalidatesTags: ['Posts'],
    }),



    // in YourForm.tsx
    const [addPost] = useAddPostMutation()

   const handleAddPost(body) => {
  addPost(body);
}

return (
  <form onSubmit={handleAddPost}>
       // your form
  </form>
)



import { configureStore, getDefaultMiddleware } from "@reduxjs/toolkit";
import userReducer from "./features/users/reducers";
import gifReducer from "./features/gif/reducers";

const middleware = [...getDefaultMiddleware({ thunk: false })];

const store = configureStore({
  reducer: {
    users: userReducer,
    gif: gifReducer
  },
  middleware
});

export default store;



import { createSlice, PayloadAction } from "@reduxjs/toolkit";

const usersInitialState = {
  data: []
};

const usersSlice = createSlice({
  name: "users",
  initialState: usersInitialState,
  reducers: {
    addUsers: (state, { payload }) => {
      state.data = payload;
    }
  }
});

export default usersSlice.reducer;
export const { addUsers } = usersSlice.actions;
export const selectUsers = (state: { users: { data: any } }) =>
  state.users.data;



import { createSlice, createAction } from "@reduxjs/toolkit";

const usersInitialState = {
  data: [],
  loading: false,
  error: false
};

const usersSlice = createSlice({
  name: "users",
  initialState: usersInitialState,
  reducers: {
    fetch: (state) => {
      state.loading = true;
      state.error = false;
      state.data = [];
    },
    fetchSuccess: (state, action) => {
      state.data = action.payload;
      state.loading = false;
    },
    fetchFailure: (state, action) => {
      state.error = action.payload.error;
      state.loading = false;
    }
  }
});

export default usersSlice.reducer;
export const { fetch, fetchSuccess, fetchFailure } = usersSlice.actions;
export const selectUsers = (state: { users: { data: any } }) =>
  state.users.data;
export const selectLoading = (state: { users: { loading: any } }) =>
  state.users.loading;
export const selectError = (state: { users: { error: any } }) =>
  state.users.error;

export const fetchUsersAsync = createAction("USERS_FETCH_ASYNC");



if (error) {
  return <p className="notification is-danger">Error!!</p>;
}

if (isFetching) {
  return <p className="notification is-info">Loading...</p>;
}


----------------------------------------------------
  ----------------------------------------------------
  ----------------------------------------------------

import { useForm } from "react-hook-form";
const { register, handleSubmit, formState: { isSubmitting } } = useForm();
const { register, handleSubmit, setError, formState: { isSubmitting, errors } } = useForm();
useForm({ defaultValues: { email: "default@example.com" } })

  < input type = "email" autoComplete = "email" {...register("email", { required: true }) } />
    < div className = "error" > { errors.email?.message }</div >

      <form onSubmit={handleSubmit(onSubmit)}>

        <form onSubmit={handleSubmit(saveFormData)}>
          <label htmlFor="email">Email</label>
          <input type="email" autoComplete="email"
            {...register("email", { required: true })} />
          <button disabled={isSubmitting}>
            {isSubmitting ? <Loading /> : "Submit"}
          </button>
        </form>

        ----------------------------------------------------

        type HomeProps = {
          children: React.ReactNode;
}

        const Home = async ({children}: HomeProps) => {
  return (
        <>
          <h1>Home</h1>
          {children}
          <div>JSON.stringify(data)</div>
        </>
        )
}
        export default Home;

        ----------------------------------------------------

        console.clear();
        const id = Math.random().toString(36).substring(2);
        console.log(`#1 = ${Math.random().toString(36).substring(2)}`);
        console.log(`#2 = ${Math.random().toString(36).substring(7)}`);
        console.log(`#3 = ${Math.random().toString(36).slice(2, 7)}`);
        console.log(`#4 = ${Math.random().toString(36).slice(-5)}`);
const randomString = length => Math.random().toString(36).substr(2, length).split("").map(e => Math.random() < Math.random() ? e.toUpperCase() : e).join().replaceAll(",", "");
        console.log(`#5 = ${randomString(10)}`);
        console.log(`#6 = ${Math.floor(Math.random() * Date.now()).toString(36)}`);
        const total = Number(entries) - Number(outputs);

        ----------------------------------------------------


        const options = {
          method: 'GET',
        url: 'https://fitness-calculator.p.rapidapi.com/idealweight',
        params: {gender, height},
        headers: {
          'X-RapidAPI-Host': 'fitness-calculator.p.rapidapi.com',
        'X-RapidAPI-Key': process.env.REACT_APP_API_KEY,
  },
}

        const response = await axios.request(options)
        const {Devine, Hamwi, Miller, Robinson} = response.data.data

        ----------------------------------------------------


        import {cache} from 'react'

export const getUser = cache(async (id: string) => {
  const user = await db.user.findUnique({id});
        return user;
});

        ----------------------------------------------------

        import dynamic from 'next/dynamic'
const CadBdClienteModalCad = lazy(() => import('./modalCad'))

        ----------------------------------------------------


        import {Suspense, lazy, } from 'react'
const CadBdClienteModalCad = dynamic(() => import('./modalCad'))

        <Suspense fallback={<div>Loading...</div>}>
          <CadBdClienteModalCad />
        </Suspense>

        ----------------------------------------------------

        const artistData = getArtist(username);
        const albumsData = getArtistAlbums(username);
        const [artist, albums] = await Promise.all([artistData, albumsData]);

        const artistData = getArtist(username);
        const albumData = getArtistAlbums(username);
        const artist = await artistData;

        <Suspense fallback={<div>Loading...</div>}>
          <Albums promise={albumData} />
        </Suspense>

        async function Albums({promise}: {promise: Promise<Album[]> }) {
  const albums = await promise;
        return (<ul>{albums.map((album) => (<li key={album.id}>{album.name}</li>))}</ul>);
}


        ----------------------------------------------------

        export interface IProduct {
          _id: string;
        description: string;
        images: string[];
        inStock: number;
        price: number;
        sizes: ISize[];
        slug: string;
        tags: string[];
        title: string;
        type: IType;
        gender: 'men' | 'women' | 'kid' | 'unisex'
        createdAt: string;
        updatedAt: string;

}

        export type ISize = 'XS' | 'S' | 'M' | 'L' | 'XL' | 'XXL' | 'XXXL';
        export type IType = 'shirts' | 'pants' | 'hoodies' | 'hats';

        ----------------------------------------------------

        export enum NotificationTypes {
          welcome = "welcome",
}

        export enum FileCategories {
          userFiles = "USER_FILES",
}
        ----------------------------------------------------

        ----------------------------------------------------


        ----------------------------------------------------